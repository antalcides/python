<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0074)http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/string.htm -->
<HTML><HEAD><TITLE>La clase String</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 6.00.2800.1264" name=GENERATOR></HEAD>
<BODY>
<H1 align=center>La clase <EM>String</EM></H1>
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD width="50%"><A 
      href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/composicion.htm"><IMG 
      height=40 alt="prev.gif (997 bytes)" 
      src="La clase String_archivos/prev.gif" width=49></A><A 
      href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/fundamentos.htm"><IMG 
      height=40 alt="chapter.gif (1105 bytes)" 
      src="La clase String_archivos/chapter.gif" width=49></A><A 
      href="http://www.sc.ehu.es/sbweb/fisica/curso.htm"><IMG height=40 
      alt="home.gif (1054 bytes)" src="La clase String_archivos/home.gif" 
      width=49></A><A 
      href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/arays.htm"><IMG 
      height=40 alt="next.gif (998 bytes)" 
      src="La clase String_archivos/next.gif" width=49></A></TD>
    <TD width="50%">
      <H3 align=right><A 
      href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/intro_clases.htm">Clases 
      y objetos</A></H3></TD></TR></TBODY></TABLE>
<P><A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/string.htm#Las clases del lenguaje Java">Las 
clases del lenguaje Java</A></P>
<P><A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/string.htm#La clase String">La 
clase <EM>String</EM></A></P>
<P><A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/string.htm#Cómo se obtiene información acerca del string">Cómo 
se obtiene información acerca del string</A></P>
<P><A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/string.htm#Comparación de strings">Comparación 
de strings</A></P>
<P><A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/string.htm#Extraer un substring de un string">Extraer 
un substring de un string</A></P>
<P><A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/string.htm#Convertir un número a string">Convertir 
un número a string</A></P>
<P><A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/string.htm#Convertir un string en número">Convertir 
un string en número</A></P>
<HR>

<P>Hemos aprendido a diferenciar entre clase y objetos, a acceder desde un 
objeto a los miembros datos y a las funciones miembro. Vamos a utilizar clases 
importantes en el lenguaje Java y a crear objetos de dichas clases. Empezaremos 
por la clase <EM>String</EM> una de las más importantes del lenguaje Java. Más 
adelante, volveremos a estudiar otros ejemplos para que el lector se acostumbre 
a crear sus propias clases. </P>
<P>&nbsp;</P>
<H2><A name="Las clases del lenguaje Java">Las clases del lenguaje Java</A></H2>
<P>Como habremos observado, y apreciaremos aún más en la parte correspondiente a 
la creación de applets, el IDE JBuilder proporciona un sistema de ayuda a medida 
que vamos escribiendo el código. También, podemos situar el cursor sobre el 
nombre de una clase, al pulsar el botón derecho del ratón, aparece un menú 
flotante. Seleccionando el primer elemento del menú, <STRONG>Browse symbol at 
curso</STRONG>r, aparece la definición de la clase. Los paneles cambian, podemos 
seleccionar la función miembro que nos interesa en el panel de estructura 
(inferior izquierda) y ver su código fuente en el panel de contenido (a la 
derecha).</P>
<P>En la figura podemos ver la clase <EM>String</EM> y en el panel de contenido 
la definición de una de las funciones miembro <EM>substring</EM> que hemos 
seleccionado en el panel de estructura. Por encima de la definición aparece la 
documentación relativa a dicha función.</P>
<P>Para volver al código fuente de nuestra clase pulsamos en el botón "home" 
encima del panel de navegación.</P>
<P><IMG height=400 alt="string.gif (17915 bytes)" 
src="La clase String_archivos/string.gif" width=819></P>
<P>&nbsp;</P>
<H2><A name="La clase String">La clase <EM>String</EM></A></H2>
<P><IMG height=32 alt="disco.gif (1035 bytes)" 
src="La clase String_archivos/disco.gif" width=32 
align=middle><STRONG>string</STRONG>: <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/codigo/StringApp.java">StringApp.java</A></P>
<P>Dentro de un objeto de la clases <EM>String</EM> o <EM>StringBuffer</EM>, 
Java crea un array de caracteres de una forma similar a como lo hace el lenguaje 
C++. A este array se accede a través de las funciones miembro de la clase.</P>
<P>Los strings u objetos de la clase <EM>String</EM> se pueden crear 
explícitamente o implícitamente. Para crear un string implícitamente basta poner 
una cadena de caracteres entre comillas dobles. Por ejemplo, cuando se 
escribe</P><PRE>	System.out.println("El primer programa");</PRE>
<P>Java crea un objeto de la clase <EM>String</EM> automáticamente.</P>
<P>Para crear un string explícitamente escribimos</P><PRE>	String str=new String("El primer programa");</PRE>
<P>También se puede escribir, alternativamente</P><PRE>	String str="El primer programa";</PRE>
<P>Para crear un string nulo se puede hacer de estas dos formas</P><PRE>	String str="";
	String str=new String();</PRE>
<P>Un string nulo es aquél que no contiene caracteres, pero es un objeto de la 
clase <EM>String</EM>. Sin embargo,</P><PRE>	String str;</PRE>
<P>está declarando un objeto <EM>str </EM>de la clase <EM>String</EM>, pero aún 
no se ha creado ningún objeto de esta clase.</P>
<P>&nbsp;</P>
<H2><A name="Cómo se obtiene información acerca del string">Cómo se obtiene 
información acerca del string</A></H2>
<P>Una vez creado un objeto de la clase <EM>String</EM> podemos obtener 
información relevante acerca del objeto a través de las funciones miembro.</P>
<P>Para obtener la longitud, número de caracteres que guarda un string se llama 
a la función miembro <EM>length</EM>.</P><PRE>	String str="El primer programa";
	int longitud=str.length();</PRE>
<P>Podemos conocer si un string comienza con un determinado prefijo, llamando al 
método <EM>startsWith</EM>, que devuelve <STRONG>true</STRONG> o 
<STRONG>false</STRONG>, según que el string comience o no por dicho prefijo</P><PRE>	String str="El primer programa";
	boolean resultado=str.startsWith("El");</PRE>
<P>En este ejemplo la variable resultado tomará el valor 
<STRONG>true</STRONG>.</P>
<P>De modo similar, podemos saber si un string finaliza con un conjunto dado de 
caracteres, mediante la función miembro <EM>endsWith</EM>.</P><PRE>	String str="El primer programa";
	boolean resultado=str.endsWith("programa");</PRE>
<P>Si se quiere obtener la posición de la primera ocurrencia de la letra p, se 
usa la función <EM>indexOf</EM>.</P><PRE>	String str="El primer programa";
	int pos=str.indexOf('p');</PRE>
<P>Para obtener las sucesivas posiciones de la letra p, se llama a otra versión 
de la misma función</P><PRE>	pos=str.indexOf('p', pos+1);</PRE>
<P>El segundo argumento le dice a la función <EM>indexOf</EM> que empiece a 
buscar la primera ocurrencia de la letra p a partir de la posición 
<EM>pos+1</EM>.</P>
<P>Otra versión de <EM>indexOf</EM> busca la primera ocurrencia de un substring 
dentro del string.</P><PRE>	String str="El primer programa";
	int pos=str.indexOf("pro");</PRE>
<P>Vemos que una clase puede definir varias funciones miembro con el mismo 
nombre pero que tienen distinto número de parámetros o de distinto tipo.</P>
<P>&nbsp;</P>
<H2><A name="Comparación de strings">Comparación de strings</A></H2>
<P><IMG height=32 alt="disco.gif (1035 bytes)" 
src="La clase String_archivos/disco.gif" width=32 
align=middle><STRONG>equals</STRONG>: <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/codigo/EqualsApp.java">EqualsApp.java</A></P>
<P>La comparación de strings nos da la oportunidad de distinguir entre el 
operador lógico <STRONG>==</STRONG> y la función miembro <EM>equals</EM> de la 
clase <EM>String</EM>. En el siguiente código</P><PRE>        String str1="El lenguaje Java";
        String str2=new String("El lenguaje Java");
	if(str1==str2){
		System.out.println("Los mismos objetos");
	}else{
		System.out.println("Distintos objetos");
	}
	if(str1.equals(str2)){
		System.out.println("El mismo contenido");
	}else{
		System.out.println("Distinto contenido");
	}        </PRE>
<P>Esta porción de código devolverá que <EM>str1</EM> y <EM>str2</EM> son 
dstintos objetos pero con el mismo contenido. <EM>str1</EM> y <EM>str2</EM> 
ocupan posiciones distintas en memoria pero guradan los mismos datos.</P>
<P>Cambiemos la segunda sentencia y escribamos</P><PRE>        String str1="El lenguaje Java";
        String str2=str1;
	System.out.prinln("Son el mimso objeto "+(str1==str2);</PRE>
<P>Los objetos <EM>str1</EM> y <EM>str2</EM> guardan la misma referencia al 
objeto de la clase <EM>String</EM> creado. La expresión <EM>(str1==str2</EM>) 
devolverá <STRONG>true</STRONG>.</P>
<P>Asñi pues, el método <EM>equals</EM> compara un string con un objeto 
cualquiera que puede ser otro string,&nbsp; y devuelve <STRONG>true</STRONG> 
cuando dos strings son iguales o <STRONG>false</STRONG> si son distintos.</P><PRE>        String str="El lenguaje Java";
	boolean resultado=str.equals("El lenguaje Java");</PRE>
<P>La variable <EM>resultado</EM> tomará el valor <STRONG>true.</STRONG></P>
<P>La función miembro <EM>comapareTo</EM> devuelve un entero menor que cero si 
el objeto string es menor (en orden alfabético) que el string dado, cero si son 
iguales, y mayor que cero si el objeto string es mayor que el string dado.</P><PRE>	String str="Tomás";
	int resultado=str.compareTo("Alberto");</PRE>
<P>La variable entera <EM>resultado</EM> tomará un valor mayor que cero, ya que 
Tomás está después de Alberto en orden alfabético.</P><PRE>	String str="Alberto";
	int resultado=str.compareTo("Tomás");</PRE>
<P>La variable entera <EM>resultado</EM> tomará un valor menor que cero, ya que 
Alberto está antes que Tomás en orden alfabético.</P>
<P>&nbsp;</P>
<H2><A name="Extraer un substring de un string">Extraer un substring de un 
string</A></H2>
<P>En muchas ocasiones es necesario extraer una porción o substring de un string 
dado. Para este propósito hay una función miembro de la clase <EM>String</EM> 
denominada <EM>substring</EM>.</P>
<P>Para estraer un substring desde una posición determinada hasta el final del 
string escribimos</P><PRE>        String str="El lenguaje Java";
	String subStr=str.substring(12);</PRE>
<P>Se obtendrá el substring "Java". </P>
<P>Una segunda versión de la función miembro <EM>substring</EM>, nos permite 
extraer un substring especificando la posición de comienzo y la el final.</P><PRE>        String str="El lenguaje Java";
	String subStr=str.substring(3, 11);</PRE>
<P>Se obtendrá el substring "lenguaje". Recuérdese, que las posiciones se 
empiezan a contar desde cero.</P>
<P>&nbsp;</P>
<H2><A name="Convertir un número a string">Convertir un número a string</A></H2>
<P>Para convertir un número en string se emplea la <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/estatico/estatico1.htm">función 
miembro estática</A> <EM>valueOf </EM>(más adelante explicaremos este tipo de 
funciones).</P><PRE>	int valor=10;
	String str=String.valueOf(valor);</PRE>
<P>La clase <EM>String</EM> proporciona versiones de <EM>valueOf</EM> para 
convertir los datos primitivos: <STRONG>int</STRONG>, <STRONG>long</STRONG>, 
<STRONG>float</STRONG>, <STRONG>double</STRONG>.</P>
<P>Esta función se emplea mucho cuando programamos applets, por ejemplo, cuando 
queremos mostrar el resultado de un cálculo en el área de trabajo de la ventana 
o en un control de edición.</P>
<P>&nbsp;</P>
<H2><A name="Convertir un string en número">Convertir un string en 
número</A></H2>
<P>Cuando introducimos caracteres en un control de edición a veces es inevitable 
que aparezcan espacios ya sea al comienzo o al final. Para eliminar estos 
espacios tenemos la función miembro <EM>trim</EM></P><PRE>	String str="  12 ";
	String str1=str.trim();</PRE>
<P>Para convertir un string en número entero, primero quitamos los espacios en 
blanco al principio y al final y luego, llamamos a la función miembro estática 
<EM>parseInt</EM> de la clase <EM>Integer </EM>(clase envolvente que describe 
los números enteros)</P><PRE>	String str="  12 ";
	int numero=Integer.parseInt(str.trim());</PRE>
<P>Para convertir un string en número decimal (<STRONG>double</STRONG>) se 
requieren dos pasos: convertir el string en un objeto de la clase envolvente 
<EM>Double</EM>, mediante la función miembro estática <EM>valueOf</EM>, y a 
continuación convertir el objeto de la clase <EM>Double</EM> en un tipo 
primitivo <STRONG>double</STRONG> mediante la función <EM>doubleValue</EM></P><PRE>	String str="12.35 ";
	double numero=Double.valueOf(str).doubleValue();</PRE>
<P>Se puede hacer el mismo procedimiento para convertir un string a número 
entero</P><PRE>	String str="12";
	int numero=Integer.valueOf(str).intValue();</PRE>
<P>&nbsp;</P>
<H2>La clase <EM>StringBuffer</EM></H2>
<P>En la sección dedicada a los operadores hemos visto que es posible <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/introduccion/operadores.htm#Concatenación de strings">concatenar 
cadenas de caracteres</A>, es, decir, objetos de la clase <EM>String</EM>. Ahora 
bien, los objetos de la clase <EM>String</EM> son constantes lo cual significa 
que por defecto, solamente se pueden crear y leer pero no se pueden 
modificar.</P>
<P>Imaginemos una función miembro a la cual se le pasa un array de cadenas de 
caracteres. Los <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/arays.htm">arrays</A> 
se estudiarán en la siguiente página.</P>
<TABLE height=228 cellSpacing=0 width="100%" border=1>
  <TBODY>
  <TR>
    <TD width="100%" bgColor=#f7f7f7 height=180><PRE>public class CrearMensaje{
	public String getMensaje(String[] palabras){
		String mensaje="";
		for(int i=0; i&lt;palabras.length; i++){	
			mensaje+=" "+palabras[i];
		}
		return mensaje;
	}
//...	
}</PRE></TD></TR></TBODY></TABLE>
<P>Cada vez que se añade una nueva palabra, se reserva una nueva porción de 
memoria y se desecha la vieja porción de memoria que es más pequeña (una palabra 
menos) para que sea liberada por el <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/clases.htm#La vida de un objeto">recolector 
de basura</A> (grabage collector). Si el bucle se realiza 1000 veces, habrá 1000 
porciones de memoria que el recolector de basura ha de identificar y 
liberar.</P>
<P>Para evitar este trabajo extra al recolector de basura, se puede emplear la 
clase <EM>StringBuffer</EM> que nos permite crear objetos dinámicos, que pueden 
modificarse.</P>
<TABLE height=228 cellSpacing=0 width="100%" border=1>
  <TBODY>
  <TR>
    <TD width="100%" bgColor=#f7f7f7 height=180><PRE>public class CrearMensaje{
	public String getMensaje(String[] palabras){
		StringBuffer mensaje=new StringBuffer();
		for(int i=0; i&lt;palabras.length; i++){	
			mensaje.append("  ");
			mensaje.append(palabras[i]);
		}
		return mensaje.toString();
	}
//...	
}</PRE></TD></TR></TBODY></TABLE>
<P>La función <EM>append</EM> incrementa la memoria reservada para el objeto 
<EM>mensaje</EM> con una palabra más sin crear nueva memoria, cada vez que se 
ejecuta el bucle. La función <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/herencia/herencia.htm#La clase base Object"><EM>toString</EM></A>, 
que veremos más adelante, convierte un objeto en una cadena de 
caracteres.</P></BODY></HTML>
