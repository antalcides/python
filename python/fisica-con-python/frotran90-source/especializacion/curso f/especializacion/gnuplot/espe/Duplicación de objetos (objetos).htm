<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0076)http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clonico/clonico1.htm -->
<HTML><HEAD><TITLE>Duplicación de objetos (objetos)</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 6.00.2800.1264" name=GENERATOR></HEAD>
<BODY>
<H1 align=center>Duplicación de objetos (objetos)</H1>
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD width="50%"><A 
      href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clonico/clonico.htm"><IMG 
      height=40 alt="prev.gif (997 bytes)" 
      src="Duplicación de objetos (objetos)_archivos/prev.gif" width=49></A><A 
      href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/fundamentos.htm"><IMG 
      height=40 alt="chapter.gif (1105 bytes)" 
      src="Duplicación de objetos (objetos)_archivos/chapter.gif" 
      width=49></A><A href="http://www.sc.ehu.es/sbweb/fisica/curso.htm"><IMG 
      height=40 alt="home.gif (1054 bytes)" 
      src="Duplicación de objetos (objetos)_archivos/home.gif" width=49></A><A 
      href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clonico/clonico2.htm"><IMG 
      height=40 alt="next.gif (998 bytes)" 
      src="Duplicación de objetos (objetos)_archivos/next.gif" width=49></A></TD>
    <TD width="50%">
      <H3 align=right><A 
      href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clonico/intro_clonico.htm">Pasando 
      datos a una función</A></H3></TD></TR></TBODY></TABLE>
<P><A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clonico/clonico1.htm#El interface Cloneable">El 
interface <EM>Cloneable</EM></A></P>
<P><A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clonico/clonico1.htm#Duplicación de un objeto simple">Duplicación 
de un objeto simple</A></P>
<P><A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clonico/clonico1.htm#Duplicación de un objeto compuesto">Duplicación 
de un objeto compuesto</A></P>
<HR>

<P>En algunas situaciones deseamos que un objeto que se pasa a una función, o 
bien, que un objeto que llama a una función miembro no se modifiquen en el curso 
de la llamada. Por ejemplo, un objeto de la <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/poo1.htm#Definición de la clase Lista">clase 
<EM>Lista</EM></A> al llamar a la función miembro <EM>ordenar</EM> modifica la 
posición de los datos en el array. Podríamos estar interesados en mantener la 
misma secuencia original no ordenada de datos.</P>
<P>Al hallar el determinante de una matriz, efectuamos una serie de 
trasformaciones sobre la matriz original que la convierte en una matriz 
triangular. Prodríamos estar interesados en mantener la matriz original para 
realizar otras operaciones.</P>
<P>En todos estos casos, puede ser muy útil para el programador realizar una 
copia del objeto original y realizar las trasformaciones en la copia dejando 
intacto el original.</P>
<P><IMG height=32 alt="disco.gif (1035 bytes)" 
src="Duplicación de objetos (objetos)_archivos/disco.gif" width=32 
align=middle><STRONG>clonico</STRONG>: <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clonico/codigo/clonico/Punto.java">Punto.java</A>, 
<A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clonico/codigo/clonico/Rectangulo.java">Rectangulo.java</A>, 
<A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clonico/codigo/clonico/ClonicoApp.java">ClonicoApp.java</A></P>
<P>&nbsp;</P>
<H2><A name="El interface Cloneable">El interface <EM>Cloneable</EM></A></H2>
<P>Un <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/herencia/interfaces.htm">interface</A> 
como hemos estudiado declara un conjunto de funciones, pero sin implementarlas. 
El interface <EM>Cloneable</EM> es muy simple ya que no define ninguna 
función.</P><PRE>public interface Cloneable { 
}</PRE>
<P>Una clase que implemente este interface le indica al método <EM>clone</EM> de 
la <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/herencia/herencia.htm#La clase base Object">clase 
base <EM>Object</EM></A> que puede hacer una copia miembro a miembro de las 
instancias de dicha clase. Si una clase no implementa esta interface, e intenta 
hacer una duplicación del objeto a través de la llamada al método <EM>clone</EM> 
de la clase base <EM>Object</EM>, da como resultado una excepción del tipo&nbsp; 
<EM>CloneNotSupportedException.</EM></P>
<P>&nbsp;</P>
<H2><A name="Duplicación de un objeto simple">Duplicación de un objeto 
simple</A></H2>
<P>La <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/herencia/herencia.htm#La clase base Object">clase 
base <EM>Object</EM></A> de todas las clases en el lenguaje Java, tiene una 
función miembro denominada <EM>clone</EM>, que se redefine en la clase derivada 
para realizar una duplicación de un objeto de dicha clase.&nbsp; </P>
<P>Sea la <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/composicion.htm#La clase Punto">clase 
<EM>Punto</EM> </A>ya estudiada en páginas anteriores. Para hacer una copia de 
un objeto de esta clase, se ha de agregar a la misma el siguiente código: 
<UL>
  <LI>se ha de implementar el interface <EM>Cloneable</EM> 
  <LI>se ha de redefinir la función miembro <EM>clone</EM> de la clase base 
  <EM>Object</EM> </LI></UL><PRE>public class Punto <STRONG>implements Cloneable</STRONG>{
    private int x;
    private int y;
//constructores ...

<STRONG>    public Object clone(){
</STRONG>        Object obj=null;
        try{
            obj=super.clone();
        }catch(CloneNotSupportedException ex){
            System.out.println(" no se puede duplicar");
        }
        return obj;
    }
//otras funciones miembro
}</PRE>
<P>En la redefinición de <EM>clone</EM>, se llama a la versión <EM>clone</EM> de 
la clase base desde <STRONG>super</STRONG>. Esta llamada se ha de hacer 
forzosamente dentro de un bloque <STRONG>try... catch</STRONG>, para <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/excepciones/excepciones.htm#Captura de las excepciones">capturar 
la excepción </A><EM>CloneNotSuportedException</EM> que nunca se producirá si la 
clase implementa el interface <EM>Cloneable</EM>. Como vemos la llamada a la 
versión <EM>clone</EM> de la clase base devuelve un objeto de la clase base 
<EM>Object</EM>, que es a su vez devuelto por la versión <EM>clone</EM> de la 
clase derivada.</P>
<P>Para crear un objeto <EM>pCopia</EM> que es una copia de otro objeto 
<EM>punto</EM> se escribe.</P><PRE>        Punto punto=new Punto(20, 30);
        Punto pCopia=(Punto)punto.clone();</PRE>
<P>La promoción (casting) es necesaria ya que <EM>clone</EM> devuelve un objeto 
de la clase base <EM>Object</EM> que ha de ser promocionado a la clase 
<EM>Punto</EM>.</P>
<P>Si hemos redefinido en la clase <EM>Punto</EM> la función miembro 
<EM>toString</EM> de la clase base <EM>Object</EM>, podemos comprobar que los 
objetos <EM>punto</EM> y <EM>pCopia</EM> guardan los mismos valores en sus 
miembros dato.</P><PRE>        System.out.println("punto "+ punto);
        System.out.println("copia "+ pCopia);
</PRE>
<TABLE cellSpacing=0 width="100%" border=1>
  <TBODY>
  <TR>
    <TD width="100%" bgColor=#f7f7f7><PRE>public class Punto implements Cloneable{
    private int x;
    private int y;
   public Punto(int x, int y) {
        this.x = x;
	    this.y = y;
    }
    public Punto() {
        x=0;
        y=0;
    }
    public Object clone(){
        Object obj=null;
        try{
            obj=super.clone();
        }catch(CloneNotSupportedException ex){
            System.out.println(" no se puede duplicar");
        }
        return obj;
    }
    public void trasladar(int dx, int dy){
        x+=dx;
        y+=dy;
    }
    public String toString(){
        String texto="origen: ("+x+", "+y+")";
        return texto;
    }
} </PRE></TD></TR></TBODY></TABLE>
<P>&nbsp;</P>
<H2><A name="Duplicación de un objeto compuesto">Duplicación de un objeto 
compuesto</A></H2>
<P>Volvamos de nuevo sobre la <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/composicion.htm#La clase Rectangulo">clase 
<EM>Rectangulo</EM></A> estudiada en páginas anteriores. Los miembros dato de la 
clase <EM>Rectangulo</EM> son un objeto de la clase <EM>Punto</EM>, el 
<EM>origen</EM>, y las dimensiones: <EM>ancho</EM> y <EM>alto</EM> del 
rectángulo.</P>
<P>Veamos ahora el código que tenemos que agregar a la clase <EM>Rectangulo</EM> 
para que se puedan efectuar copias de los objetos de dicha clase.</P><PRE>public class Rectangulo <STRONG>implements Cloneable</STRONG>{
    private int ancho ;
    private int alto ;
    private Punto origen;
//los constructores
    <STRONG>public Object clone()</STRONG>{
        Rectangulo obj=null;
        try{
            obj=(Rectangulo)super.clone();
        }catch(CloneNotSupportedException ex){
            System.out.println(" no se puede duplicar");
        }
        obj.origen=(Punto)obj.origen.clone();
        return obj;
    }
//otras funciones miembro
}</PRE>
<P>Un objeto de la clase <EM>Rectangulo</EM> contiene un subobjeto de la clase 
<EM>Punto</EM>. En la redefinición de la función miembro <EM>clone</EM> de la 
clase <EM>Rectangulo</EM> se ha de efectuar una duplicación de dicho subobjeto 
llamando a la versión <EM>clone</EM> definida en la clase <EM>Punto</EM>.</P>
<P>Recuérdese que la llamada a <EM>clone</EM> siempre devuelve un objeto de la 
clase base <EM>Object</EM> que ha de ser promocionado (casting) a la clase 
derivada adecuada.</P>
<P>Veamos ahora, como se crea un objeto de la clase <EM>Rectangulo</EM> y se 
duplica. Para crear un objeto <EM>rCopia</EM> que es una copia del objeto 
<EM>rect</EM> de la clase <EM>Rectangulo</EM>, se escribe.</P><PRE>        Rectangulo rect=new Rectangulo(new Punto(0, 0), 4, 5);
        Rectangulo rCopia=(Rectangulo)rect.clone();
</PRE>
<P>Si hemos redefinido en la clase <EM>Rectangulo</EM> la función miembro 
<EM>toString</EM> de la clase base <EM>Object</EM>, podemos comprobar que los 
objetos <EM>rect</EM> y <EM>rCopia</EM> guardan los mismos valores en sus 
miembros dato.</P><PRE>        System.out.println("rectángulo "+ rect);
        System.out.println("copia "+ rCopia);
</PRE>
<TABLE cellSpacing=0 width="100%" border=1>
  <TBODY>
  <TR>
    <TD width="100%" bgColor=#f7f7f7><PRE>public class Rectangulo implements Cloneable{
    private int ancho ;
    private int alto ;
    private Punto origen;

    public Rectangulo() {
	    origen = new Punto(0, 0);
	    ancho=0;
	    alto=0;
    }
    public Rectangulo(Punto p) {
	    this(p, 0, 0);
    }
    public Rectangulo(int w, int h) {
	    this(new Punto(0, 0), w, h);
    }
    public Rectangulo(Punto p, int w, int h) {
	    origen = p;
	    ancho = w;
	    alto = h;
    }
    public Object clone(){
        Rectangulo obj=null;
        try{
            obj=(Rectangulo)super.clone();
        }catch(CloneNotSupportedException ex){
            System.out.println(" no se puede duplicar");
        }
        obj.origen=(Punto)obj.origen.clone();
        return obj;
    }
    public void mover(int dx, int dy) {
	    origen.trasladar(dx, dy);
    }
    public int area() {
	    return ancho * alto;
    }
    public String toString(){
        String texto=origen+" ancho: "+ancho+" alto: "+alto;
        return texto;
    }
}</PRE></TD></TR></TBODY></TABLE>
<P>&nbsp;</P></BODY></HTML>
