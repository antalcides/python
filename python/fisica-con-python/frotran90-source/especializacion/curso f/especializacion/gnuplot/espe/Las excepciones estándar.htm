<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0083)http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/excepciones/excepciones.htm -->
<HTML><HEAD><TITLE>Las excepciones estándar</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 6.00.2800.1264" name=GENERATOR></HEAD>
<BODY>
<H1 align=center>Las excepciones estándar</H1>
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD width="50%"><A 
      href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/fundamentos.htm"><IMG 
      height=40 alt="chapter.gif (1105 bytes)" 
      src="Las excepciones estándar_archivos/chapter.gif" width=49></A><A 
      href="http://www.sc.ehu.es/sbweb/fisica/curso.htm"><IMG height=40 
      alt="home.gif (1054 bytes)" 
      src="Las excepciones estándar_archivos/home.gif" width=49></A><A 
      href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/excepciones/propias.htm"><IMG 
      height=40 alt="next.gif (998 bytes)" 
      src="Las excepciones estándar_archivos/next.gif" width=49></A></TD>
    <TD width="50%">
      <H3 align=right><A 
      href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/excepciones/intro_excepciones.htm">Las 
      excepciones</A></H3></TD></TR></TBODY></TABLE>
<P><A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/excepciones/excepciones.htm#Las excepciones">Las 
excepciones</A></P>
<P><A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/excepciones/excepciones.htm#Captura de las excepciones">Captura 
de las excepciones</A></P>
<P><A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/excepciones/excepciones.htm#Manejando varias excepciones">Manejando 
varias excepciones</A></P>
<HR>

<P>Los programadores de cualquier lenguaje se esfuerzan por escribir programas 
libres de errores, sin embargo, es muy difícil que los programas reales se vean 
libres de ellos. En Java las situaciones que pueden provocar un fallo en el 
programa se denominan excepciones. </P>
<P>Java lanza una excepción en respuesta a una situación poco usual. El 
programador también puede lanzar sus propias excepciones. Las excepciones en 
Java son objetos de clases derivadas de la clase base <EM>Exception</EM>. 
Existen también los errores internos que son objetos de la clase <EM>Error</EM> 
que no estudiaremos. Ambas clases <EM>Error</EM> y <EM>Exception</EM> son clases 
derivadas de la clase base <EM>Throwable</EM>.</P>
<P>Existe toda una jerarquía de clases derivada de la clase base 
<EM>Exception</EM>. Estas clases derivadas se ubican en dos grupos 
principales:</P>
<P>Las excepciones en tiempo de ejecución ocurren cuando el programador no ha 
tenido cuidado al escribir su código. Por ejemplo, cuando se sobrepasa la 
dimensión de un array se lanza una excepción <EM>ArrayIndexOutOfBounds</EM>. 
Cuando se hace uso de una referencia a un objeto que no ha sido creado se lanza 
la excepción <EM>NullPointerException</EM>. Estas excepciones le indican al 
programador que tipos de fallos tiene el programa y que debe arreglarlo antes de 
proseguir.</P>
<P>El segundo grupo de excepciones, es el más interesante, ya que indican que ha 
sucedido algo inesperado o fuera de control.</P>
<P>&nbsp;</P>
<H2><A name="Las excepciones">Las excepciones</A></H2>
<P>En la página dedicada al estudio de la clase <EM>String</EM>, mencionamos una 
función que convierte un <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/string.htm#Convertir un string en número">string 
en un número</A>. Esta función es muy usuada cuando creamos applets. 
Introducimos el número en un control de edición, se obtiene el texto y se guarda 
en un string. Luego, se convierte el string en número entero mediante la función 
estática <EM>Integer.parseInt</EM>, y finalmente, usamos dicho número.</P><PRE>	String str="  12 ";
	int numero=Integer.parseInt(str);</PRE>
<P>Si se introducen caracteres no numéricos, o no se quitan los espacios en 
blanco al principio y al final del string, <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/clases1/string.htm#Convertir un string en número">mediante 
la función <EM>trim</EM></A>, se lanza una excepción <EM>NumberFormatException. 
</EM>
<DL>
  <DD><FONT face="MS Sans Serif" size=1>AppAccelerator(tm) 1.1.034 for Java (JDK 
  1.1), x86 version.<BR>Copyright (c) 1998 Borland International. All Rights 
  Reserved.<BR><BR><STRONG>java.lang.NumberFormatException</STRONG>: 12 
  <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at 
  java.lang.Integer.parseInt(Compiled 
  Code)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at 
  java.lang.<STRONG>Integer.parseInt(</STRONG>Integer.java:390)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  at excepcion.ExcepcionApp.<STRONG>main</STRONG>(ExcepcionApp.java:8)</FONT> 
  </DD></DL>
<P>Para ver este texto, <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/introduccion/proyecto.htm#Execution Log">se 
selecciona el elemento del menú del IDE <EM>Run/Parematers</EM>.</A> En el 
cuadro de diálogo que aparece activar el botón de radio <EM>Set run output to 
Execution Log</EM>. Luego, se corre la aplicación <EM>Run/Run</EM>. Se 
selecciona el elemento del menú <EM>View/Execution Log</EM>, para que se muestre 
en una ventana la salida del programa.&nbsp; Para restaurar la salida a la 
consola, la ventana DOS, se selecciona de nuevo <EM>Run/Parematers</EM>. En el 
cuadro de diálogo que aparece, se activa el botón de radio <EM>Set run output to 
Console window.</EM></P>
<P>El mensaje que aparece en la ventana nos indica el tipo de excepción 
<EM>NumberFormatException, </EM>la función que la ha lanzado 
<EM>Integer.parseInt</EM>, que se llama dentro de <EM>main</EM>.<BR></P>
<H3>Objeto no inicializado</H3>
<P>Habitualmente, cuando llamanos desde un objeto no inicializado, a una función 
miembro.</P><PRE>    public static void main(String[] args) {
	String str;
        str.length();
	//...
   }</PRE>
<P>El compilador se queja con el siguiente mensaje "variable str might not have 
been initilized". En otras ocasiones, se lanza una excepción del tipo 
<EM>NulPointerException. </EM>Fijarse que en la porción de código que sigue, 
<EM>grafico</EM> es una variable de instancia que es inicializada por defecto a 
<STRONG>null</STRONG>.</P><PRE>class MiCanvas....{
	Grafico grafico;
    public void paint(...){
	grafico.dibuja();
	//...
    }
//...
}</PRE>
<P>Como vemos en la porción de código, si al llamarse a la función 
<EM>paint</EM>, el objeto <EM>grafico</EM> no ha sido inicializado con el valor 
devuelto por <STRONG>new</STRONG> al crear un objeto de la clase 
<EM>Grafico</EM> o de alguna de sus clases derivadas, se lanza la excepción 
<EM>NullPointerException</EM> apareciendo en la consola el siguiente 
texto.</P><FONT face="MS Sans Serif" size=1>
<P>Exception occurred during event 
dispatching:<BR>java.lang.NullPointerException<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
at 
grafico1.MiCanvas.paint(MiCanvas.java:43)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
at sun.awt.windows.WComponentPeer.handleEvent(Compiled 
Code)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at 
java.awt.Component.dispatchEventImpl(Compiled 
Code)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at 
java.awt.Component.dispatchEvent(Compiled 
Code)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at 
java.awt.EventDispatchThread.run(EventDispatchThread.java:82)</P></FONT>
<P>&nbsp;</P>
<H3>Entrada/salida</H3>
<P>En otras situaciones el mensaje de error aparece en el momento en el que se 
compila el programa. Así, cuando intentamos leer un carácter del teclado, 
llamamos a la la función</P><PRE>        System.in.read();</PRE>
<P>Cuando compilamos el programa, nos aparece un mensaje de error que no nos 
deja proseguir.</P><PRE>unreported exception: java.io.IOException; must be caught or declared to be thrown</PRE>
<P>&nbsp;</P>
<H2><A name="Captura de las excepciones">Captura de las excepciones</A></H2>
<P>Empecemos por solucionar el error que se produce en el programa durante la 
compilación. Tal como indica el mensaje que genera el compilador, se ha de poner 
la sentencia <EM>System.in.read();</EM> en un bloque 
<STRONG>try</STRONG>...<STRONG>catch</STRONG>, del siguiente modo.</P><PRE>    	try {
        	System.in.read();
    	}catch (IOException ex) {  }
</PRE>
<P>Para solucionar el error que se produce en el programa durante su ejecución, 
se debe poner la llamada a <EM>Integer.parseInt</EM> en el siguiente 
bloque&nbsp; <STRONG>try</STRONG>...<STRONG>catch</STRONG>.</P><PRE>	String str="  12 ";
	int numero;
    	try{
        	numero=Integer.parseInt(str);
    	}catch(NumberFormatException ex){
        	System.out.println("No es un número");
    	}</PRE>
<P>En el caso de que el string <EM>str</EM> contenga caracteres no numéricos 
como es éste el caso, el número 12 está acompñado de espacios en blanco, se 
produce una excepción del tipo <EM>NumberFormatException</EM> que es capturada y 
se imprime el mensaje "No es un número". </P>
<P>En vez de un mensaje propio se puede imprimir el objeto <EM>ex </EM>de la 
clase <EM>NumberFormatException</EM></P><PRE>    	try{
		//...
	}catch(NumberFormatException ex){
        	System.out.println(ex);
    	}</PRE>
<P>La clase base <EM>Throwable</EM> de todas las clases que describen las 
excepciones, redefine la función <EM>toString</EM>, que devuelve el nombre de la 
clase que describe la excepción acompañado del mensaje asociado, que en este 
caso es el propio string <EM>str</EM>.</P><PRE>java.lang.NumberFormatException:    12 </PRE>
<P>Podemos extraer dicho mensaje mediante la función miembro 
<EM>getMessage</EM>, del siguiente modo</P><PRE>    	try{
		//...
	}catch(NumberFormatException ex){
        	System.out.println(ex.getMessage());
    	}</PRE>
<P>&nbsp;</P>
<H2><A name="Manejando varias excepciones">Manejando varias excepciones</A></H2>
<P><IMG height=32 alt="disco.gif (1035 bytes)" 
src="Las excepciones estándar_archivos/disco.gif" width=32 align=middle> 
<STRONG>excepcion</STRONG>: <A 
href="http://www.sc.ehu.es/sbweb/fisica/cursoJava/fundamentos/excepciones/codigo/ExcepcionApp.java">ExcepcionApp.java</A></P>
<P>Vamos a crear un programa que divida dos números. Supongamos que los números 
se introducen én dos controles de edicion. Se obtiene el texto de cada uno de 
los controles de edición que se guardan en dos strings. En esta situación se 
pueden producir dos excepciones <EM>NumberFormatException</EM>, si se introducen 
caracteres no numéricos y <EM>ArithmeticException</EM> si se divide entre 
cero.</P>
<TABLE cellSpacing=0 width="100%" border=1>
  <TBODY>
  <TR>
    <TD width="100%" bgColor=#f7f7f7><PRE>public class ExcepcionApp {
    public static void main(String[] args) {
        String str1="12";
	String str2="0";
        String respuesta;
	int numerador, denominador, cociente;
        try{
            numerador=Integer.parseInt(str1);
            denominador=Integer.parseInt(str2);
            cociente=numerador/denominador;
            respuesta=String.valueOf(cociente);
        }catch(NumberFormatException ex){
            respuesta="Se han introducido caracteres no numéricos";
        }catch(ArithmeticException ex){
            respuesta="División entre cero";
        }
        System.out.println(respuesta);
    }
}</PRE></TD></TR></TBODY></TABLE>
<P>Como vemos las sentencias susceptibles de lanzar una excepción se sitúan en 
un bloque <STRONG>try</STRONG>...<STRONG>catch</STRONG>. Si el denominador es 
cero, se produce una excepción de la clase <EM>ArithmeticException</EM> en la 
expresión que halla el cociente, que es inmediatamente capturada en el bloque 
<STRONG>catch</STRONG> que maneja dicha excepción, ejecutándose las sentencias 
que hay en dicho bloque. En este caso se guarda en el string <EM>respuesta</EM> 
el texto "División entre cero".</P>
<P>Hay veces en las que se desea estar seguro de que un bloque de código se 
ejecute se produzcan o no excepciones. Se puede hacer esto añadiendo un bloque 
<STRONG>finally</STRONG> después del último <STRONG>catch</STRONG>. Esto es 
importante cuando accedemos a archivos, para asegurar que se cerrará siempre un 
archivo se produzca o no un error en el proceso de lectura/escritura.</P><PRE>	try{
		//Este código puede generar una excepción
	}catch(Exception ex){
		//Este código se ejecuta cuando se produce una excepción
	}finally{
		//Este código se ejecuta se produzca o no una excepción
	}</PRE></BODY></HTML>
